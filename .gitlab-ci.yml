# GitLab CI/CD Pipeline for Bot Slack Service
# This pipeline includes build, test, security scan, and deployment stages

stages:
  - build
  - test
  - security
  - deploy
  - cleanup

variables:
  # Docker configuration
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_IMAGE_NAME: "$CI_REGISTRY_IMAGE/bot-slack"
  DOCKER_IMAGE_TAG: "$CI_COMMIT_SHORT_SHA"
  
  # Application configuration
  APP_NAME: "bot-slack"
  PYTHON_VERSION: "3.9"
  
  # Deployment configuration
  DEPLOY_HOST: "your-server.com"  # Update with your server
  DEPLOY_USER: "deploy"
  DEPLOY_PATH: "/opt/bot-slack"

# Cache configuration for faster builds
cache:
  paths:
    - .pip-cache/
    - node_modules/
  key: "$CI_COMMIT_REF_SLUG"

# Before script - runs before each job
before_script:
  - echo "Starting CI/CD pipeline for commit $CI_COMMIT_SHORT_SHA"
  - echo "Branch: $CI_COMMIT_REF_NAME"
  - echo "Pipeline ID: $CI_PIPELINE_ID"

# ==========================================
# BUILD STAGE
# ==========================================

build:docker:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - echo "Building Docker image..."
    - docker build -t $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG -f deployment/Dockerfile .
    - docker build -t $DOCKER_IMAGE_NAME:latest -f deployment/Dockerfile .
    - echo "Pushing Docker image to registry..."
    - docker push $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG
    - docker push $DOCKER_IMAGE_NAME:latest
  only:
    - main
    - develop
    - merge_requests
  tags:
    - docker

build:python:
  stage: build
  image: python:3.9-slim
  before_script:
    - apt-get update && apt-get install -y gcc
    - pip install --upgrade pip
    - pip install --cache-dir .pip-cache -r requirements.txt
  script:
    - echo "Building Python application..."
    - python -m py_compile app/main.py
    - python -m py_compile run.py
    - echo "Python build completed successfully"
  artifacts:
    paths:
      - "*.pyc"
      - "app/*.pyc"
    expire_in: 1 hour
  only:
    - main
    - develop
    - merge_requests

# ==========================================
# TEST STAGE
# ==========================================

test:unit:
  stage: test
  image: python:3.9-slim
  before_script:
    - apt-get update && apt-get install -y gcc curl
    - pip install --upgrade pip
    - pip install --cache-dir .pip-cache -r requirements.txt
    - pip install pytest pytest-cov pytest-flask
  script:
    - echo "Running unit tests..."
    - python -m pytest test_api.py -v --cov=app --cov-report=xml --cov-report=html
    - echo "Unit tests completed"
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
      - htmlcov/
      - coverage.xml
    expire_in: 1 week
  coverage: '/TOTAL.+ ([0-9]{1,3}%)$/'
  only:
    - main
    - develop
    - merge_requests

test:integration:
  stage: test
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  before_script:
    - apk add --no-cache curl
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - echo "Running integration tests..."
    - docker pull $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG
    - docker run -d --name test-container -p 5000:5000 -e FLASK_ENV=testing $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG
    - sleep 30  # Wait for container to start
    - curl -f http://localhost:5000/health || exit 1
    - echo "Integration tests passed"
  after_script:
    - docker stop test-container || true
    - docker rm test-container || true
  only:
    - main
    - develop
    - merge_requests
  tags:
    - docker

test:lint:
  stage: test
  image: python:3.9-slim
  before_script:
    - pip install --upgrade pip
    - pip install flake8 black isort
  script:
    - echo "Running code quality checks..."
    - flake8 app/ services/ utils/ --max-line-length=88 --exclude=__pycache__
    - black --check app/ services/ utils/
    - isort --check-only app/ services/ utils/
    - echo "Code quality checks passed"
  allow_failure: true
  only:
    - main
    - develop
    - merge_requests

# ==========================================
# SECURITY STAGE
# ==========================================

security:dependency-scan:
  stage: security
  image: python:3.9-slim
  before_script:
    - pip install --upgrade pip
    - pip install safety bandit
  script:
    - echo "Running security scans..."
    - safety check -r requirements.txt
    - bandit -r app/ services/ utils/ -f json -o bandit-report.json
    - echo "Security scans completed"
  artifacts:
    reports:
      sast: bandit-report.json
    paths:
      - bandit-report.json
    expire_in: 1 week
  allow_failure: true
  only:
    - main
    - develop
    - merge_requests

security:docker-scan:
  stage: security
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - echo "Scanning Docker image for vulnerabilities..."
    - docker pull $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG
    # Add your preferred vulnerability scanner here (e.g., Trivy, Clair)
    - echo "Docker security scan completed"
  allow_failure: true
  only:
    - main
    - develop
  tags:
    - docker

# ==========================================
# DEPLOYMENT STAGE
# ==========================================

deploy:staging:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client docker-compose
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $DEPLOY_HOST >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - echo "Deploying to staging environment..."
    - ssh $DEPLOY_USER@$DEPLOY_HOST "cd $DEPLOY_PATH && docker-compose pull"
    - ssh $DEPLOY_USER@$DEPLOY_HOST "cd $DEPLOY_PATH && docker-compose up -d"
    - ssh $DEPLOY_USER@$DEPLOY_HOST "cd $DEPLOY_PATH && docker-compose ps"
    - echo "Staging deployment completed"
  environment:
    name: staging
    url: http://staging.$DEPLOY_HOST
  only:
    - develop
  when: manual

deploy:production:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client docker-compose
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $DEPLOY_HOST >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - echo "Deploying to production environment..."
    - ssh $DEPLOY_USER@$DEPLOY_HOST "cd $DEPLOY_PATH && docker-compose pull"
    - ssh $DEPLOY_USER@$DEPLOY_HOST "cd $DEPLOY_PATH && docker-compose up -d"
    - ssh $DEPLOY_USER@$DEPLOY_HOST "cd $DEPLOY_PATH && docker system prune -f"
    - echo "Production deployment completed"
  environment:
    name: production
    url: http://$DEPLOY_HOST
  only:
    - main
  when: manual

deploy:rollback:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client docker-compose
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $DEPLOY_HOST >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - echo "Rolling back to previous version..."
    - ssh $DEPLOY_USER@$DEPLOY_HOST "cd $DEPLOY_PATH && docker-compose down"
    - ssh $DEPLOY_USER@$DEPLOY_HOST "cd $DEPLOY_PATH && docker-compose up -d"
    - echo "Rollback completed"
  environment:
    name: production
    url: http://$DEPLOY_HOST
  when: manual
  only:
    - main

# ==========================================
# CLEANUP STAGE
# ==========================================

cleanup:docker:
  stage: cleanup
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - echo "Cleaning up old Docker images..."
    - docker system prune -f
    - echo "Docker cleanup completed"
  only:
    - main
    - develop
  when: manual
  tags:
    - docker

# ==========================================
# NOTIFICATION (Optional)
# ==========================================

notify:slack:
  stage: .post
  image: alpine:latest
  before_script:
    - apk add --no-cache curl
  script:
    - |
      if [ "$CI_JOB_STATUS" == "success" ]; then
        MESSAGE="✅ Pipeline succeeded for $CI_PROJECT_NAME on $CI_COMMIT_REF_NAME"
        COLOR="good"
      else
        MESSAGE="❌ Pipeline failed for $CI_PROJECT_NAME on $CI_COMMIT_REF_NAME"
        COLOR="danger"
      fi
      
      curl -X POST -H 'Content-type: application/json' \
        --data "{\"text\":\"$MESSAGE\", \"color\":\"$COLOR\"}" \
        $SLACK_WEBHOOK_URL
  only:
    - main
    - develop
  when: always
  allow_failure: true